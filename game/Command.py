# Command.py
# Class definition for 'Command'

from game.Tile import Tile
from game.Coordinate import Coordinate

# A Command is a useful wrapper around the command data generated by user bot code.
#
# Constructor Arguments
# playerID          -  the ID of the player issuing this command.
# position (tuple)  -  the board position in which this command originates.
# command           -  the type of command issued.
# number_of_units   -  the number of units involved in this command.
# direction (tuple) -  the direction associated with this command.

class Command:
    def __init__(self, playerId, position, command, number_of_units, direction):
        self.playerId = playerId

        self.command = command

        self.direction = direction
        self.position = Coordinate(position)

        # Catch people trying to send negative number of units
        if number_of_units >= 1:
            self.number_of_units = number_of_units
        else: self.number_of_units = 0

    def decrement_units(self, number=1):
        if self.number_of_units >= number:
            self.number_of_units -= number

        else:
            self.number_of_units = 0


    @classmethod
    def from_dict(cls, playerId, d):
        return cls(playerId, d["location"], d["command"], d["number_of_units"], d["direction"])
